echo 134217728 > /proc/sys/kernel/shmmax；
　　#说明：这里的值为内存的一半；
　　#如果系统内存是256M，则值为134217728 ；
　　#如果系统内存是512M，则值为268435456；

1) There is always a kernel internal mount which you will not see at
   all. This is used for shared anonymous mappings and SYSV shared
   memory. 

   This mount does not depend on CONFIG_TMPFS. If CONFIG_TMPFS is not
   set the user visible part of tmpfs is not build, but the internal
   mechanisms are always present.

2) glibc 2.2 and above expects tmpfs to be mounted at /dev/shm for
   POSIX shared memory (shm_open, shm_unlink). Adding the following
   line to /etc/fstab should take care of this:

    tmpfs       /dev/shm        tmpfs   defaults        0 0

   Remember to create the directory that you intend to mount tmpfs on
   if necessary (/dev/shm is automagically created if you use devfs).

   This mount is _not_ needed for SYSV shared memory. The internal
   mount is used for that. (In the 2.3 kernel versions it was
   necessary to mount the predecessor of tmpfs (shm fs) to use SYSV
   shared memory)

If memory serves, the only reason to use SysV/POSIX over mmap is portability. 
In particularly older Unix systems don't support MAP_ANON. Solaris, Linux, the BSDs and OS X do, 
however, so in practice, there's little reason not to use mmap.
shm in Linux is typically implemented via a /dev/shm file that gets mmapped, 
so, performance should be equivalent -- I'd go with mmap (w/MAP_ANON and MAP_SHARED as you mention) 
for simplicity, if I know portability is no issue as you say's the case for you.

In the Solaris 2.x operating system, the most efficient way to implement 
shared memory applications is to rely on the mmap() function and on the system's 
native virtual memory facility. Solaris 2.x also supports System V shared memory, 
which is another way to let multiple processes attach a segment of physical memory 
to their virtual address spaces. When write access is allowed for more than one process, 
an outside protocol or mechanism such as a semaphore can be used 
to prevent inconsistencies and collisions. 





# Google Sparse Hash - http://code.google.com/p/google-sparsehash/
The Google SparseHash project contains several C++ hash-map implementations in use at Google, 
with different performance characteristics, including an implementation that optimizes for space 
and one that optimizes for speed. 
The memory-optimized one is extremely memory-efficient with only 2 bits/entry of overhead.

# SunriseDD - http://www.sunrisetel.net/software/devtools/sunrise-data-dictionary.shtml
An open source C library for hash table storage of arbitrary data objects with lock-free lookups, 
built-in reference counting and guaranteed order iteration. The library can participate in external 
reference counting systems or use its own built-in reference counting. It comes with a variety of hash 
functions and allows the use of runtime supplied hash functions via callback mechanism. 
Source code is well documented.

# uthash - http://uthash.sourceforge.net/
This is an easy-to-use hash table for C structures.
